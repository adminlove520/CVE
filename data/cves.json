{
  "dataType": "CVE_RECORD",
  "dataVersion": "5.1",
  "cveMetadata": {
    "total_count": 6,
    "last_updated": "2025-10-06T15:51:07.446448",
    "severity_distribution": {
      "critical": 0,
      "high": 1,
      "medium": 2,
      "low": 1,
      "none": 2
    }
  },
  "cves": [
    {
      "id": "CVE-2025-61679",
      "publishedDate": "2025-10-03T21:27:35.612Z",
      "lastModifiedDate": "2025-10-06T15:42:51.744Z",
      "description": "Anyquery is an SQL query engine built on top of SQLite. Versions 0.4.3 and below allow attackers who have already gained access to localhost, even with low privileges, to use the http server through the port unauthenticated, and access private integration data like emails, without any warning of a foreign login from the provider. This issue is fixed in version 0.4.4.",
      "severity": 7.7,
      "references": [
        {
          "url": "https://github.com/julien040/anyquery/security/advisories/GHSA-5f7p-rhmq-hvc7",
          "type": "reference"
        },
        {
          "url": "https://github.com/julien040/anyquery/commit/43cd8bd3354b9725b245a2354b08e1c9be1cc1d3",
          "type": "reference"
        },
        {
          "url": "https://github.com/julien040/anyquery/releases/tag/0.4.4",
          "type": "reference"
        }
      ],
      "affected": [
        {
          "vendor": "julien040",
          "product": "anyquery",
          "versions": [
            {
              "version": "< 0.4.4",
              "status": "affected"
            }
          ]
        }
      ],
      "problemType": [
        "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
        "CWE-287: Improper Authentication"
      ],
      "fix_suggestion": "无法生成修复建议"
    },
    {
      "id": "CVE-2025-61224",
      "publishedDate": "2025-10-06T00:00:00.000Z",
      "lastModifiedDate": "2025-10-06T15:39:42.841Z",
      "description": "Cross Site Scripting vulnerability in DokuWiki 2025-05-14a 'Librarian'[56.1] allows a remote attacker to execute arbitrary code via the q parameter",
      "severity": 6.5,
      "references": [
        {
          "url": "https://github.com/dokuwiki/dokuwiki/issues/4512",
          "type": "reference"
        },
        {
          "url": "https://github.com/MarioTesoro/vulnerability-research/tree/main/CVE-2025-61224",
          "type": "reference"
        }
      ],
      "affected": [
        {
          "vendor": "n/a",
          "product": "n/a",
          "versions": [
            {
              "version": "n/a",
              "status": "affected"
            }
          ]
        }
      ],
      "problemType": [
        "n/a"
      ],
      "fix_suggestion": "无法生成修复建议"
    },
    {
      "id": "CVE-2025-61681",
      "publishedDate": "2025-10-03T21:46:59.313Z",
      "lastModifiedDate": "2025-10-06T15:45:27.050Z",
      "description": "KUNO CMS is a fully deployable full-stack blog application. Versions 1.3.13 and below contain validation flaws in its file upload functionality that can be exploited for stored XSS. The upload endpoint only validates file types based on Content-Type headers, lacks file content analysis and extension whitelist restrictions, allowing attackers to upload SVG files containing malicious scripts (disguised as images). When users access the uploaded resource pages, arbitrary JavaScript executes in their browsers. This issue is fixed in version 1.3.14.",
      "severity": 5.4,
      "references": [
        {
          "url": "https://github.com/xuemian168/kuno/security/advisories/GHSA-q3w2-2vqp-gx3r",
          "type": "reference"
        },
        {
          "url": "https://github.com/xuemian168/kuno/commit/fc486b5c9091b607f82bf7b354d18f25204f7dc6",
          "type": "reference"
        },
        {
          "url": "https://github.com/xuemian168/kuno/releases/tag/v1.3.14",
          "type": "reference"
        }
      ],
      "affected": [
        {
          "vendor": "xuemian168",
          "product": "kuno",
          "versions": [
            {
              "version": "< 1.3.14",
              "status": "affected"
            }
          ]
        }
      ],
      "problemType": [
        "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "CWE-434: Unrestricted Upload of File with Dangerous Type"
      ],
      "fix_suggestion": "无法生成修复建议"
    },
    {
      "id": "CVE-2025-61677",
      "publishedDate": "2025-10-03T21:18:39.670Z",
      "lastModifiedDate": "2025-10-06T15:41:16.866Z",
      "description": "DataChain is a Python-based AI-data warehouse for transforming and analyzing unstructured data. Versions 0.34.1 and below allow for deseriaization of untrusted data because of the way the DataChain library reads serialized objects from environment variables (such as DATACHAIN__METASTORE and DATACHAIN__WAREHOUSE) in the loader.py module. An attacker with the ability to set these environment variables can trigger code execution when the application loads. This issue is fixed in version 0.34.2.",
      "severity": 2.5,
      "references": [
        {
          "url": "https://github.com/iterative/datachain/security/advisories/GHSA-6px8-mr29-cj4r",
          "type": "reference"
        },
        {
          "url": "https://github.com/iterative/datachain/pull/1358",
          "type": "reference"
        },
        {
          "url": "https://github.com/iterative/datachain/commit/914b95610620d50c8d9bee506ccbfa7d4d57fdc0",
          "type": "reference"
        }
      ],
      "affected": [
        {
          "vendor": "iterative",
          "product": "datachain",
          "versions": [
            {
              "version": "< 0.34.2",
              "status": "affected"
            }
          ]
        }
      ],
      "problemType": [
        "CWE-502: Deserialization of Untrusted Data"
      ],
      "fix_suggestion": "无法生成修复建议"
    },
    {
      "id": "CVE-2025-59734",
      "publishedDate": "2025-10-06T08:09:44.280Z",
      "lastModifiedDate": "2025-10-06T15:45:08.677Z",
      "description": "It is possible to cause an use-after-free write in SANM decoding with a carefully crafted animation using subversion <2.\n\nWhen a STOR chunk is present, a subsequent FOBJ chunk will be saved in ctx->stored_frame. Stored frames can later be referenced by FTCH chunks. For files using subversion < 2, the undecoded frame is stored, and decoded again when the FTCH chunks are parsed. However, in process_frame_obj if the frame has an invalid size, there’s an early return, with a value of 0. \n\nThis causes the code in decode_frame to still store the raw frame buffer into ctx->stored_frame. Leaving ctx->has_dimensions set to false.\n\nA subsequent chunk with type FTCH would call process_ftch and decode that frame obj again, adding to the top/left values and calling process_frame_obj again.\nGiven that we never set ctx->have_dimensions before, this time we set the dimensions, calling init_buffers, which can reallocate the buffer in ctx->stored_frame, freeing the previous one. However, the GetByteContext object gb still holds a reference to the old buffer.\n\n\n\n\nFinally, when the code tries to decode the frame, codecs that accept a GetByteContext as a parameter will trigger a use-after-free read when using gb.\n\nGetByteContext is only used for reading bytes, so at most one could read invalid data. There are no heap allocations between the free and when the object is accessed. However, upon returning to process_ftch, the code restores the original values for top/left in stored_frame, writing 4 bytes to the freed data at offset 6, potentially corrupting the allocator’s metadata.\n\nThis issue can be triggered just by probing whether a file has the sanm format.\n\n\n\n\n\n\n\nWe recommend upgrading to version 8.0 or beyond.",
      "severity": "N/A",
      "references": [
        {
          "url": "https://b.corp.google.com/issues/440183164",
          "type": "reference"
        }
      ],
      "affected": [
        {
          "collectionURL": "https://git.ffmpeg.org/ffmpeg.git",
          "defaultStatus": "unaffected",
          "packageName": "SANM",
          "product": "FFmpeg",
          "repo": "https://git.ffmpeg.org/ffmpeg.git",
          "vendor": "FFmpeg",
          "versions": [
            {
              "lessThan": "8.0",
              "status": "affected",
              "version": "4d7c609be37dc57d31527c8c9e5945dc9491a7cd",
              "versionType": "custom"
            },
            {
              "lessThan": "8.0",
              "status": "affected",
              "version": "7.1.1",
              "versionType": "semver"
            }
          ]
        }
      ],
      "problemType": [
        "CWE-416 Use After Free"
      ],
      "fix_suggestion": "无法生成修复建议"
    },
    {
      "id": "CVE-2025-61680",
      "publishedDate": "2025-10-03T21:37:31.341Z",
      "lastModifiedDate": "2025-10-06T15:43:41.340Z",
      "description": "Minecraft RCON Terminal is a VS Code extension that streamlines Minecraft server management. Versions 0.1.0 through 2.0.6 stores passwords using VS Code's configuration API which writes to settings.json in plaintext. This issue is fixed in version 2.1.0.",
      "severity": "N/A",
      "references": [
        {
          "url": "https://github.com/jaketcooper/Minecraft-rcon/security/advisories/GHSA-4m33-hxqw-7j77",
          "type": "reference"
        },
        {
          "url": "https://github.com/jaketcooper/Minecraft-rcon/commit/31272b541482d095d1578855c2b571268eb9b877",
          "type": "reference"
        },
        {
          "url": "https://github.com/jaketcooper/Minecraft-rcon/releases/tag/2.1.0",
          "type": "reference"
        }
      ],
      "affected": [
        {
          "vendor": "jaketcooper",
          "product": "Minecraft-rcon",
          "versions": [
            {
              "version": ">= 0.1.0, < 2.1.0",
              "status": "affected"
            }
          ]
        }
      ],
      "problemType": [
        "CWE-256: Plaintext Storage of a Password"
      ],
      "fix_suggestion": "无法生成修复建议"
    }
  ]
}