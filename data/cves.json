{
  "dataType": "CVE_RECORD",
  "dataVersion": "5.1",
  "cveMetadata": {
    "total_count": 3,
    "last_updated": "2025-06-24T20:41:06.625467",
    "severity_distribution": {
      "critical": 1,
      "high": 0,
      "medium": 1,
      "low": 0,
      "none": 1
    }
  },
  "cves": [
    {
      "id": "CVE-2025-52572",
      "publishedDate": "2025-06-24T20:10:18.861Z",
      "lastModifiedDate": "2025-06-24T20:10:18.861Z",
      "description": "Hikka, a Telegram userbot, has vulnerability affects all users on all versions of Hikka. Two scenarios are possible. 1. Web interface does not have an authenticated session: attacker can use his own Telegram account to gain RCE to the server by authorizing in the dangling web interface. 2. Web interface does have an authenticated session: due to insufficient warning in the authentication message, users were tempted to click \"Allow\" in the \"Allow web application ops\" menu. This gave an attacker access not only to remote code execution, but also to Telegram accounts of owners. Scenario number 2 is known to have been exploited in the wild. No known patches are available, but some workarounds are available. Use `--no-web` flag and do not start userbot without it; after authorizing in the web interface, close the port on the server and/or start the userbot with `--no-web` flag; and do not click \"Allow\" in your helper bot unless it is your explicit action that needs to be allowed.",
      "severity": 10,
      "references": [
        {
          "url": "https://github.com/hikariatama/Hikka/security/advisories/GHSA-7x3c-335v-wxjj",
          "type": "reference"
        },
        {
          "url": "https://t.me/bbcode/9",
          "type": "reference"
        }
      ],
      "affected": [
        {
          "vendor": "hikariatama",
          "product": "Hikka",
          "versions": [
            {
              "version": "<= 1.7.0-wip",
              "status": "affected"
            }
          ]
        }
      ],
      "problemType": [
        "CWE-287: Improper Authentication"
      ],
      "fix_suggestion": "无法生成修复建议"
    },
    {
      "id": "CVE-2025-52883",
      "publishedDate": "2025-06-24T20:12:59.904Z",
      "lastModifiedDate": "2025-06-24T20:12:59.904Z",
      "description": "Meshtastic-Android is an Android application for the mesh radio software Meshtastic. Prior to version 2.5.21, an attacker is able to send an unencrypted direct message to a victim impersonating any other node of the mesh. This message will be displayed in the same chat that the victim normally communicates with the other node and it will appear as using PKC, while it is not. This means that the victim will be provided with a false sense of security due to the green padlock displayed when using PKC and they'll read the attacker's message as legitimate. Version 2.5.21 contains a patch for the issue. It is suggested to implement a stricter control on whether a message has been received using PKC or using the shared Meshtastic channel key. Moreover, instead of showing no green padlock icon in the chat with no PKC, consider using an explicit indicator like, for example, the yellow half-open padlock displayed when in HAM mode. This remediation, however, applies to the client applications rather than the Meshtastic firmware.",
      "severity": 5.3,
      "references": [
        {
          "url": "https://github.com/meshtastic/Meshtastic-Android/security/advisories/GHSA-h4rg-g6f3-ghh7",
          "type": "reference"
        },
        {
          "url": "https://github.com/meshtastic/Meshtastic-Android/pull/1720",
          "type": "reference"
        }
      ],
      "affected": [
        {
          "vendor": "meshtastic",
          "product": "Meshtastic-Android",
          "versions": [
            {
              "version": "< 2.5.21",
              "status": "affected"
            }
          ]
        }
      ],
      "problemType": [
        "CWE-1287: Improper Validation of Specified Type of Input"
      ],
      "fix_suggestion": "无法生成修复建议"
    },
    {
      "id": "CVE-2025-52884",
      "publishedDate": "2025-06-24T20:20:17.287Z",
      "lastModifiedDate": "2025-06-24T20:20:17.287Z",
      "description": "RISC Zero is a zero-knowledge verifiable general computing platform, with Ethereum integration. The risc0-ethereum repository contains Solidity verifier contracts, Steel EVM view call library, and supporting code. Prior to versions 2.1.1 and 2.2.0, the `Steel.validateCommitment` Solidity library function will return `true` for a crafted commitment with a digest value of zero. This violates the semantics of `validateCommitment`, as this does not commitment to a block that is in the current chain. Because the digest is zero, it does not correspond to any block and there exist no known openings. As a result, this commitment will never be produced by a correct zkVM guest using Steel and leveraging this bug to compromise the soundness of a program using Steel would require a separate bug or misuse of the Steel library, which is expected to be used to validate the root of state opening proofs. A fix has been released as part of `risc0-ethereum` 2.1.1 and 2.2.0. Users for the `Steel` Solidity library versions 2.1.0 or earlier should ensure they are using `Steel.validateCommitment` in tandem with zkVM proof verification of a Steel program, as shown in the ERC-20 counter example, and documentation. This is the correct usage of Steel, and users following this pattern are not at risk, and do not need to take action. Users not verifying a zkVM proof of a Steel program should update their application to do so, as this is incorrect usage of Steel.",
      "severity": "N/A",
      "references": [
        {
          "url": "https://github.com/risc0/risc0-ethereum/security/advisories/GHSA-gjv3-89hh-9xq2",
          "type": "reference"
        },
        {
          "url": "https://github.com/risc0/risc0-ethereum/pull/605",
          "type": "reference"
        },
        {
          "url": "https://github.com/risc0/risc0-ethereum/commit/3bbac859c7132b21ba5fdf2d47f1dd52e7e73d98",
          "type": "reference"
        },
        {
          "url": "https://docs.beboundless.xyz/developers/steel/how-it-works#verifying-the-proof-onchain",
          "type": "reference"
        },
        {
          "url": "https://github.com/risc0/risc0-ethereum/blob/ff0cb9253a87945b653b825711b8b5075f8b7545/examples/erc20-counter/contracts/src/Counter.sol#L56-L63",
          "type": "reference"
        },
        {
          "url": "https://github.com/risc0/risc0-ethereum/releases/tag/v2.1.1",
          "type": "reference"
        },
        {
          "url": "https://github.com/risc0/risc0-ethereum/releases/tag/v2.2.0",
          "type": "reference"
        }
      ],
      "affected": [
        {
          "vendor": "risc0",
          "product": "risc0-ethereum",
          "versions": [
            {
              "version": "< 2.1.1",
              "status": "affected"
            }
          ]
        }
      ],
      "problemType": [
        "CWE-159: Improper Handling of Invalid Use of Special Elements"
      ],
      "fix_suggestion": "无法生成修复建议"
    }
  ]
}