{
  "dataType": "CVE_RECORD",
  "dataVersion": "5.1",
  "cveMetadata": {
    "total_count": 3,
    "last_updated": "2025-04-21T13:40:01.304575",
    "severity_distribution": {
      "critical": 0,
      "high": 1,
      "medium": 0,
      "low": 1,
      "none": 1
    }
  },
  "cves": [
    {
      "id": "CVE-2025-32442",
      "publishedDate": "2025-04-18T15:59:06.670Z",
      "lastModifiedDate": "2025-04-21T13:29:14.448Z",
      "description": "Fastify is a fast and low overhead web framework, for Node.js. In versions 5.0.0 to 5.3.0, applications that specify different validation strategies for different content types have a possibility to bypass validation by providing a _slightly altered_ content type such as with different casing or altered whitespacing before `;`. This was patched in v5.3.1, but the initial patch did not cover all problems. This has been fully patched in v5.3.2. A workaround involves not specifying individual content types in the schema.",
      "severity": 7.5,
      "references": [
        {
          "url": "https://github.com/fastify/fastify/security/advisories/GHSA-mg2h-6x62-wpwc",
          "type": "reference"
        },
        {
          "url": "https://github.com/fastify/fastify/commit/436da4c06dfbbb8c24adee3a64de0c51e4f47418",
          "type": "reference"
        },
        {
          "url": "https://github.com/fastify/fastify/commit/f3d2bcb3963cd570a582e5d39aab01a9ae692fe4",
          "type": "reference"
        },
        {
          "url": "https://hackerone.com/reports/3087928",
          "type": "reference"
        }
      ],
      "affected": [
        {
          "vendor": "fastify",
          "product": "fastify",
          "versions": [
            {
              "version": ">= 5.0.0, < 5.3.2",
              "status": "affected"
            }
          ]
        }
      ],
      "problemType": [
        "CWE-1287: Improper Validation of Specified Type of Input"
      ],
      "fix_suggestion": "无法生成修复建议"
    },
    {
      "id": "CVE-2025-3823",
      "publishedDate": "2025-04-20T10:31:05.566Z",
      "lastModifiedDate": "2025-04-21T13:24:36.550Z",
      "description": "A vulnerability classified as problematic has been found in SourceCodester Web-based Pharmacy Product Management System 1.0. Affected is an unknown function of the file add-stock.php. The manipulation of the argument txttotalcost/txtproductID/txtprice/txtexpirydate leads to cross site scripting. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used.",
      "severity": 2.4,
      "references": [
        {
          "url": "https://vuldb.com/?id.305730",
          "type": "reference"
        },
        {
          "url": "https://vuldb.com/?ctiid.305730",
          "type": "reference"
        },
        {
          "url": "https://github.com/yaklang/IRifyScanResult/blob/main/Web-based%20Pharmacy%20Product%20Management%20System/xss_from_input_with_post.md",
          "type": "poc"
        },
        {
          "url": "https://www.sourcecodester.com/",
          "type": "reference"
        }
      ],
      "affected": [
        {
          "vendor": "SourceCodester",
          "product": "Web-based Pharmacy Product Management System",
          "versions": [
            {
              "version": "1.0",
              "status": "affected"
            }
          ]
        }
      ],
      "problemType": [
        "Cross Site Scripting",
        "Code Injection"
      ],
      "fix_suggestion": "无法生成修复建议"
    },
    {
      "id": "CVE-2025-32792",
      "publishedDate": "2025-04-18T16:04:16.778Z",
      "lastModifiedDate": "2025-04-21T13:28:59.847Z",
      "description": "SES safely executes third-party JavaScript 'strict' mode programs in compartments that have no excess authority in their global scope. Prior to version 1.12.0, web pages and web extensions using `ses` and the Compartment API to evaluate third-party code in an isolated execution environment that have also elsewhere used `const`, `let`, and `class` bindings in the top-level scope of a `<script>` tag will have inadvertently revealed these bindings in the lexical scope of third-party code. This issue has been patched in version 1.12.0. Workarounds for this issue involve either avoiding top-level `let`, `const`, or `class` bindings in `<script>` tags, or change these to `var` bindings to be reflected on `globalThis`.",
      "severity": "N/A",
      "references": [
        {
          "url": "https://github.com/endojs/endo/security/advisories/GHSA-h9w6-f932-gq62",
          "type": "reference"
        }
      ],
      "affected": [
        {
          "vendor": "endojs",
          "product": "endo",
          "versions": [
            {
              "version": "< 1.12.0",
              "status": "affected"
            }
          ]
        }
      ],
      "problemType": [
        "CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere"
      ],
      "fix_suggestion": "无法生成修复建议"
    }
  ]
}