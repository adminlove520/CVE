{
  "dataType": "CVE_RECORD",
  "dataVersion": "5.1",
  "cveMetadata": {
    "total_count": 4,
    "last_updated": "2025-10-10T19:55:23.497307",
    "severity_distribution": {
      "critical": 1,
      "high": 0,
      "medium": 2,
      "low": 0,
      "none": 1
    }
  },
  "cves": [
    {
      "id": "CVE-2025-35050",
      "publishedDate": "2025-10-09T20:19:12.867Z",
      "lastModifiedDate": "2025-10-10T19:38:21.311Z",
      "description": "Newforma Info Exchange (NIX) accepts serialized .NET data via the '/remoteweb/remote.rem' endpoint, allowing a remote, unauthenticated attacker to execute arbitrary code with 'NT AUTHORITY\\NetworkService' privileges. The vulnerable endpoint is used by Newforma Project Center Server (NPCS), so a compromised NIX system can be used to attack an associated NPCS system. To mitigate this vulnerability, restrict network access to the '/remoteweb/remote.rem' endpoint, for example using the IIS URL Rewrite Module.",
      "severity": 9.8,
      "references": [
        {
          "url": "https://projectcenter.help.newforma.com/overviews/info_exchange_overview/",
          "type": "reference"
        },
        {
          "url": "https://learn.microsoft.com/en-us/iis/extensions/url-rewrite-module/using-the-url-rewrite-module",
          "type": "reference"
        },
        {
          "url": "https://raw.githubusercontent.com/cisagov/CSAF/develop/csaf_files/IT/white/2025/va-25-282-01.json",
          "type": "reference"
        },
        {
          "url": "https://www.cve.org/CVERecord?id=CVE-2025-35050",
          "type": "reference"
        }
      ],
      "affected": [
        {
          "vendor": "Newforma",
          "product": "Project Center",
          "defaultStatus": "unknown",
          "versions": [
            {
              "version": "*",
              "status": "affected"
            },
            {
              "version": "2024.3",
              "status": "affected"
            }
          ]
        }
      ],
      "problemType": [
        "CWE-502 Deserialization of Untrusted Data",
        "CWE-306 Missing Authentication for Critical Function"
      ],
      "fix_suggestion": "无法生成修复建议"
    },
    {
      "id": "CVE-2025-61999",
      "publishedDate": "2025-10-07T23:14:38.171Z",
      "lastModifiedDate": "2025-10-10T19:38:46.491Z",
      "description": "OPEXUS FOIAXpress before 11.13.3.0 allows an administrative user to upload JavaScript or other content embedded in an SVG image used as a logo. Injected content is executed in the context of other users when they view affected pages. Successful exploitation allows the administrative user to perform actions on behalf of the target, including stealing session cookies, user credentials, or sensitive data.",
      "severity": 4.3,
      "references": [
        {
          "url": "https://docs.opexustech.com/docs/foiaxpress/11.13.0/FOIAXpress_Release_Notes_11.13.3.0.pdf",
          "type": "reference"
        },
        {
          "url": "https://raw.githubusercontent.com/cisagov/CSAF/develop/csaf_files/IT/white/2025/va-25-280-01.json",
          "type": "reference"
        },
        {
          "url": "https://www.cve.org/CVERecord?id=CVE-2025-61999",
          "type": "reference"
        }
      ],
      "affected": [
        {
          "vendor": "OPEXUS",
          "product": "FOIAXpress",
          "defaultStatus": "unknown",
          "versions": [
            {
              "version": "0",
              "status": "affected",
              "lessThan": "11.13.3.0",
              "versionType": "custom"
            },
            {
              "version": "11.13.3.0",
              "status": "unaffected"
            }
          ]
        }
      ],
      "problemType": [
        "CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
      ],
      "fix_suggestion": "无法生成修复建议"
    },
    {
      "id": "CVE-2025-61998",
      "publishedDate": "2025-10-07T23:14:16.924Z",
      "lastModifiedDate": "2025-10-10T19:39:28.197Z",
      "description": "OPEXUS FOIAXpress before 11.13.3.0 allows an administrative user to inject JavaScript or other content as a URL within the Technical Support Hyperlink Manager. Injected content is executed in the context of other users when they click the malicious link. Successful exploitation allows the administrative user to perform actions on behalf of the target, including stealing session cookies, user credentials, or sensitive data.",
      "severity": 4.3,
      "references": [
        {
          "url": "https://docs.opexustech.com/docs/foiaxpress/11.13.0/FOIAXpress_Release_Notes_11.13.3.0.pdf",
          "type": "reference"
        },
        {
          "url": "https://www.cve.org/CVERecord?id=CVE-2025-61998",
          "type": "reference"
        },
        {
          "url": "https://raw.githubusercontent.com/cisagov/CSAF/develop/csaf_files/IT/white/2025/va-25-280-01.json",
          "type": "reference"
        }
      ],
      "affected": [
        {
          "vendor": "OPEXUS",
          "product": "FOIAXpress",
          "defaultStatus": "unknown",
          "versions": [
            {
              "version": "0",
              "status": "affected",
              "lessThan": "11.13.3.0",
              "versionType": "custom"
            },
            {
              "version": "11.13.3.0",
              "status": "unaffected"
            }
          ]
        }
      ],
      "problemType": [
        "CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
      ],
      "fix_suggestion": "无法生成修复建议"
    },
    {
      "id": "CVE-2025-61927",
      "publishedDate": "2025-10-10T19:38:19.835Z",
      "lastModifiedDate": "2025-10-10T19:38:19.835Z",
      "description": "Happy DOM is a JavaScript implementation of a web browser without its graphical user interface. Happy DOM v19 and lower contains a security vulnerability that puts the owner system at the risk of RCE (Remote Code Execution) attacks. A Node.js VM Context is not an isolated environment, and if the user runs untrusted JavaScript code within the Happy DOM VM Context, it may escape the VM and get access to process level functionality. It seems like what the attacker can get control over depends on if the process is using ESM or CommonJS. With CommonJS the attacker can get hold of the `require()` function to import modules. Happy DOM has JavaScript evaluation enabled by default. This may not be obvious to the consumer of Happy DOM and can potentially put the user at risk if untrusted code is executed within the environment. Version 20.0.0 patches the issue by changing JavaScript evaluation to be disabled by default.",
      "severity": "N/A",
      "references": [
        {
          "url": "https://github.com/capricorn86/happy-dom/security/advisories/GHSA-37j7-fg3j-429f",
          "type": "reference"
        },
        {
          "url": "https://github.com/capricorn86/happy-dom/commit/819d15ba289495439eda8be360d92a614ce22405",
          "type": "reference"
        }
      ],
      "affected": [
        {
          "vendor": "capricorn86",
          "product": "happy-dom",
          "versions": [
            {
              "version": "< 20.0.0",
              "status": "affected"
            }
          ]
        }
      ],
      "problemType": [
        "CWE-94: Improper Control of Generation of Code ('Code Injection')"
      ],
      "fix_suggestion": "无法生成修复建议"
    }
  ]
}